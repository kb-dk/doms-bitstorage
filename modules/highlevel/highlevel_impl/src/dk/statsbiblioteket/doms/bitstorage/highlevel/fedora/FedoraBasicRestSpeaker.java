/*
 * $Id$
 * $Revision$
 * $Date$
 * $Author$
 *
 * The DOMS project.
 * Copyright (C) 2007-2010  The State and University Library
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package dk.statsbiblioteket.doms.bitstorage.highlevel.fedora;

import dk.statsbiblioteket.doms.bitstorage.characteriser.Characterisation;
import dk.statsbiblioteket.doms.bitstorage.highlevel.fedora.exceptions.*;
import dk.statsbiblioteket.doms.bitstorage.highlevel.fedora.generated.DatastreamProfile;
import dk.statsbiblioteket.doms.bitstorage.highlevel.fedora.generated.ObjectProfile;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.Credentials;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.HTTP;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

/**
 * TODO ABR forgot to javadoc this class
 */
public class FedoraBasicRestSpeaker {

    private String username;

    private String password;

    private String server;

    private int port;

    DefaultHttpClient client;
    HttpHost host;
    private Unmarshaller unmarshaller;
    private Marshaller marshaller;


    public FedoraBasicRestSpeaker(String username,
                                  String password,
                                  String server,
                                  int port) {
        this.username = username;
        this.password = password;
        this.server = server;
        this.port = port;


        client = new DefaultHttpClient();
        if (username != null) {

            Credentials creds =
                    new UsernamePasswordCredentials(username, password);
            BasicCredentialsProvider provider = new BasicCredentialsProvider();

            provider.setCredentials(AuthScope.ANY, creds);
            client.setCredentialsProvider(provider);
        }
        host = new HttpHost(server, port);
        try {
            JAXBContext context = JAXBContext.newInstance(
                    "dk.statsbiblioteket.doms.bitstorage.highlevel.fedora.generated:" +
                            Characterisation.class.getPackage().getName());
            unmarshaller = context.createUnmarshaller();
            marshaller = context.createMarshaller();
        } catch (JAXBException e) {
            //TODO this is an autogenerated catch block
            throw new Error(e);
        }

    }

    /*--------- Statics--------------------*/
    public static String sanitize(String pid) {
        if (pid.startsWith("info:fedora/")) {
            pid = pid.replaceFirst("info:fedora/", "");
        }
        try {
            return URLEncoder.encode(pid, HTTP.DEFAULT_CONTENT_CHARSET);
        } catch (UnsupportedEncodingException e) {//TODO this should never happen
            throw new RuntimeException(e);
        }
    }

    /*-------------------Creators--------------------------------*/

    void createExternalDatastream(String pid, String ds, String url, String checksum) {
        HttpRequest create =
                new HttpPost("fedora/objects/" + pid + "/datastreams/" +
                        ds + "?controlgroup=R&dsLocation=" + url +
                        "&dsState=A&checksumType=md5&checksum=" + checksum);
        try {
            HttpEntity result = invoke(create);
        } catch (FedoraCommunicationException e) {
            throw new Error(e); //TODO this is an autogenerated catch block
        } catch (ResourceNotFoundException e) {
            throw new Error(e); //TODO this is an autogenerated catch block
        }

    }


    void createInlineDatastream(String pid,
                                String ds,
                                String characurl
    )
            throws FedoraCommunicationException, FedoraAuthenticationException {
        HttpRequest modify =
                new HttpPost("fedora/objects/" + pid + "/datastreams/" +
                        ds + "?dsLocation=" + characurl +
                        "&mimetype=text/xml&dsState=A");
        try {
            invoke(modify);
        } catch (ResourceNotFoundException e) {
            throw new FedoraCommunicationException(e);
        }
    }


/*------------------------ Checkers -----------------------------------*/

    void isOK(HttpRequest request) throws
            FedoraCommunicationException,
            ResourceNotFoundException,
            FedoraAuthenticationException {
        if (!(request instanceof HttpGet)) {
            throw new InternalException(
                    "Only usable for GET requests");
        }
        invoke(request);
    }

    private void datastreamExists(String pid,
                                  String datastream) {
        //To change body of created methods use File | Settings | File Templates.
    }


    public boolean objectExists(String pid
    )
            throws FedoraCommunicationException {
        HttpRequest getObjectProfile = new HttpGet("fedora/objects/" + pid);

        try {
            isOK(getObjectProfile);
        } catch (ResourceNotFoundException e) {
            return false;
        }
        return true;
    }


    /* --------------------- Getters -----------------------------*/
    DatastreamProfile getDatastreamProfile(String pid,
                                           String datastreamname
    )
            throws
            FedoraCommunicationException,
            FedoraDatastreamNotFoundException {
        pid = sanitize(pid);

        objectExists(pid);

        HttpRequest getDatastream = new HttpGet(
                "fedora/objects/" + pid + "/datastreams/" +
                        datastreamname + "?format=xml");
        HttpEntity datastream;
        try {
            datastream = invoke(getDatastream);
        } catch (ResourceNotFoundException e) {
            throw new FedoraDatastreamNotFoundException(e);
        }
        InputStream stream;
        try {

            stream = datastream.getContent();
            if (stream == null) {
                //TODO some error
            }

            Object datastreamProfile = null;
            try {
                datastreamProfile = unmarshaller.unmarshal(stream);
            } catch (JAXBException e) {
                throw new FedoraCommunicationException(e);
            }
            if (datastreamProfile instanceof DatastreamProfile) {
                DatastreamProfile profile =
                        (DatastreamProfile) datastreamProfile;
                return profile;
            } else {
                throw new FedoraCommunicationException(datastreamProfile.toString());
            }
        } catch (IOException e) {
            throw new FedoraCommunicationException(e);
        }

    }

    public ObjectProfile getObjectProfile(String pid)
            throws
            FedoraCommunicationException,
            FedoraObjectNotFoundException {
        pid = sanitize(pid);

        objectExists(pid);

        HttpRequest getObject = new HttpGet(
                "fedora/objects/" + pid + "?format=xml");
        HttpEntity datastream;
        try {
            datastream = invoke(getObject);
        } catch (ResourceNotFoundException e) {
            throw new FedoraObjectNotFoundException(e);
        }
        InputStream stream;
        try {

            stream = datastream.getContent();
            if (stream == null) {
                //TODO some error
            }

            Object objectProfile = null;
            try {
                objectProfile = unmarshaller.unmarshal(stream);
            } catch (JAXBException e) {
                throw new FedoraCommunicationException(e);
            }
            if (objectProfile instanceof ObjectProfile) {
                ObjectProfile profile = (ObjectProfile) objectProfile;
                return profile;
            } else {
                throw new FedoraCommunicationException(objectProfile.toString());
            }
        } catch (IOException e) {
            throw new FedoraCommunicationException(e);
        }

    }

    public HttpEntity getDatastreamContents(String pid,
                                            String datastream)
            throws FedoraCommunicationException, IOException {
        pid = sanitize(pid);
        datastream = sanitize(datastream);
        HttpRequest getDatastreamContents = new HttpGet(
                "fedora/objects/" + pid + "/datastreams/" +
                        datastream + "/contents");
        objectExists(pid);
        datastreamExists(pid, datastream);

        try {
            HttpEntity content = invoke(getDatastreamContents);
            return content;
        } catch (ResourceNotFoundException e) {//Catchall, since the resource MUST exist, except for race conditions
            throw new FedoraCommunicationException(e);
        }
    }
/*--------------------------------- Directs ---------------------------------*/

    HttpEntity invoke(HttpRequest request
    )
            throws
            FedoraCommunicationException,
            FedoraServerError,
            FedoraClientException,
            FedoraAuthenticationException,
            ResourceNotFoundException {
        try {
            HttpResponse result = client.execute(
                    host, request);
            int httpcode = result.getStatusLine().getStatusCode();
            String status = result.getStatusLine().toString();
            if (httpcode > 500) { //server error
                throw new FedoraServerError(status);
            } else if (httpcode > 400) {
                switch (httpcode) {
                    case 401:
                        throw new FedoraAuthenticationException(status);
                    case 403:
                        throw new FedoraAuthenticationException(status);
                    case 404:
                        throw new ResourceNotFoundException(status);
                    case 407:
                        throw new FedoraAuthenticationException(status);
                    case 410:
                        throw new ResourceNotFoundException(status);
                    default:
                        throw new FedoraClientException(status);
                }

            } else if (httpcode > 300) {
                throw new FedoraCommunicationException(status);

            } else if (httpcode > 200) {//we're good

            } else {//WTF
                throw new FedoraCommunicationException(status);
            }
            return result.getEntity();

        } catch (IOException e) {
            throw new FedoraCommunicationException(e);
        }

    }

}
