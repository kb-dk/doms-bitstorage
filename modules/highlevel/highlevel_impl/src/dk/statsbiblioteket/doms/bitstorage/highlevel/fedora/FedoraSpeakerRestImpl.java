/*
 * $Id$
 * $Revision$
 * $Date$
 * $Author$
 *
 * The DOMS project.
 * Copyright (C) 2007-2010  The State and University Library
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package dk.statsbiblioteket.doms.bitstorage.highlevel.fedora;

import dk.statsbiblioteket.doms.bitstorage.characteriser.Characterisation;
import dk.statsbiblioteket.doms.bitstorage.highlevel.UrlProvider;
import dk.statsbiblioteket.doms.bitstorage.highlevel.fedora.exceptions.*;
import dk.statsbiblioteket.doms.bitstorage.highlevel.fedora.generated.*;

import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.JAXBContext;
import javax.xml.ws.WebServiceContext;
import java.io.*;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.net.URLEncoder;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Created by IntelliJ IDEA.
 * User: abr
 * Date: Jan 20, 2010
 * Time: 9:48:14 AM
 * To change this template use File | Settings | File Templates.
 */
public class FedoraSpeakerRestImpl implements FedoraSpeaker {

    private static Log log = LogFactory.getLog(FedoraSpeakerRestImpl.class);


    private String contentDatastreamName;
    private String characterisationDatastreamName;


    private Unmarshaller unmarshaller;
    private Marshaller marshaller;

    private FedoraBasicRestSpeaker rest;


    public FedoraSpeakerRestImpl(String contentDatastreamName,
                                 String characterisationDatastreamName,
                                 String username,
                                 String password,
                                 String server,
                                 int port) {
        try {
            JAXBContext context = JAXBContext.newInstance(
                    "dk.statsbiblioteket.doms.bitstorage.highlevel.fedora.generated:"
                    +
                    Characterisation.class.getPackage().getName());
            unmarshaller = context.createUnmarshaller();
            marshaller = context.createMarshaller();
        } catch (JAXBException e) {
            //TODO this is an autogenerated catch block
            throw new Error(e);
        }

        rest = new FedoraBasicRestSpeaker(username,
                                          password,
                                          server,
                                          port,
                                          unmarshaller);
        this.contentDatastreamName = contentDatastreamName;
        this.characterisationDatastreamName = characterisationDatastreamName;


    }

    public void createContentDatastream(String pid,
                                        String url,
                                        String checksum,
                                        String filename)
            throws
            FedoraObjectNotFoundException,
            FedoraDatastreamAlreadyExistException,
            FedoraCommunicationException,
            FedoraChecksumFailedException,
            FedoraAuthenticationException {

        rest.objectExists(pid);
        try {
            rest.datastreamExists(pid, contentDatastreamName);
            throw new FedoraDatastreamAlreadyExistException(
                    "Datastream already exists, cannot create");
        } catch (FedoraDatastreamNotFoundException e) {
            //this is good, continue
        }
        try {
            rest.createExternalDatastream(pid,
                                          contentDatastreamName,
                                          url,
                                          checksum,
                                          filename
            );
        } catch (ResourceNotFoundException e) {
            throw new FedoraCommunicationException("Should not fail", e);
        }


    }

    public void updateContentDatastream(String pid,
                                        String url,
                                        String checksum,
                                        String filename)
            throws
            FedoraObjectNotFoundException,
            FedoraCommunicationException,
            FedoraDatastreamNotFoundException,
            FedoraAuthenticationException {
        rest.objectExists(pid);
        rest.datastreamExists(pid, contentDatastreamName);
        try {
            rest.createExternalDatastream(pid,
                                          contentDatastreamName,
                                          url,
                                          checksum,
                                          filename
            );
        } catch (ResourceNotFoundException e) {
            throw new FedoraCommunicationException("Should not fail");
        }


    }


    public Collection<String> getAllowedFormatURIs(String pid,
                                                   String datastream)
            throws
            FedoraObjectNotFoundException,
            FedoraCommunicationException,
            FedoraAuthenticationException {

        //not delegate
        ObjectProfile profile = rest.getObjectProfile(pid);
        List<String> cmodels = profile.getObjModels().getModel();

        Set<String> uris = new HashSet<String>();
        for (String cmodel : cmodels) {
            String content = null;
            try {
                content = rest.getDatastreamContents(cmodel,
                                                     "DS-COMPOSITE-MODEL");
            } catch (ResourceNotFoundException e) {
                // The content model does not exist, or do not have the datastream
                //not technically a problem, so log this instead
                log.debug(
                        "The content model, or the DS-COMPOSITE-MODEL datastream does not exist",
                        e);
            }

            Object temp = null;
            try {
                temp = unmarshaller.unmarshal(new StringReader(content));
            } catch (JAXBException e) {
                throw new FedoraCommunicationException(e);
            }
            if (temp instanceof DsCompositeModel) {
                DsCompositeModel dsCompositeModel = (DsCompositeModel) temp;
                uris.addAll(extractFormatURIs(dsCompositeModel,
                                              datastream));
            }
        }
        return uris;

    }

    private Set<String> extractFormatURIs(DsCompositeModel dsCompositeModel,
                                          String datastream) {
        Set<String> uris = new HashSet<String>();
        List<DsTypeModel> typemodels = dsCompositeModel.getDsTypeModel();
        for (DsTypeModel dsTypeModel : typemodels) {
            if (datastream.equals(dsTypeModel.getID())) {
                List<Form> forms = dsTypeModel.getForm();
                for (Form form : forms) {
                    String formaturi = form.getFORMATURI();
                    if (formaturi != null && !formaturi.isEmpty()) {
                        uris.add(formaturi);
                    }
                }
            }
        }
        return uris;
    }


    public void storeCharacterization(String pid,
                                      Characterisation characterisation,
                                      WebServiceContext context)
            throws
            FedoraObjectNotFoundException,
            FedoraCommunicationException,
            FedoraDatastreamAlreadyExistException,
            FedoraAuthenticationException {


        //marshall the charac to a string or url
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        //marshall charac to inputstream blob
        try {
            marshaller.marshal(characterisation, out);
        } catch (JAXBException e) {
            //TODO?
            throw new RuntimeException(
                    "Failed somehow to marshal characterisation",
                    e);
        }
        InputStream blob = new ByteArrayInputStream(out.toByteArray());


        //make blob available as URL
        String id;
        try {
            id = UrlProvider.registerBlob(blob,
                                          characterisationDatastreamName,
                                          "text/xml");
        } catch (IOException e) {//not gonna happen
            throw new RuntimeException(
                    "Could not read from ByteArrayInputStream somehow",
                    e);
        }
        try {
            String characurl;
            characurl = UrlProvider.createURLfromID(id, context);
            rest.objectExists(pid);
            try {
                rest.datastreamExists(pid, characterisationDatastreamName);
                throw new FedoraDatastreamAlreadyExistException(
                        "'" + characterisationDatastreamName
                        + "' already exists,"
                        + " cannot store characterisation");
            } catch (FedoraDatastreamNotFoundException e) {
                //good
            }
            rest.createInternalDatastream(pid,
                                          characterisationDatastreamName,
                                          characurl,
                                          "Characterisation");
        } finally {
            UrlProvider.unregisterBlob(id);
        }
    }


    /**
     * Returns true if there is content in the datastream. The datastream has contet
     * if we can read the content without getting an exception. If false, this
     * might mean that the datastream or the object does not exist.
     *
     * @param pid        the pid of the object
     * @param datastream the datastream
     * @return true if as much as one character can be read from the stream
     * @throws FedoraCommunicationException on anything else
     */
    public boolean datastreamHasContent(String pid,
                                        String datastream)
            throws
            FedoraCommunicationException,
            FedoraAuthenticationException {
        return rest.datastreamHasContent(pid, datastream);
    }

    public void deleteDatastream(String pid,
                                 String ds)
            throws
            FedoraCommunicationException,
            FedoraAuthenticationException {
        try {
            rest.deleteDatastream(pid, ds);
        } catch (ResourceNotFoundException e) {
            log.debug("Attempted to delete non-existing resource", e);
        }
    }

    public String getFileUrl(String pid)
            throws
            FedoraObjectNotFoundException,
            FedoraDatastreamNotFoundException,
            FedoraCommunicationException,
            FedoraAuthenticationException {
        rest.objectExists(pid);
        DatastreamProfile profile;
        try {
            profile = rest.getDatastreamProfile(pid, contentDatastreamName);
        } catch (ResourceNotFoundException e) {
            throw new FedoraDatastreamNotFoundException(
                    "The datastream does not exist",
                    e);
        }
        return profile.getDsLocation();

    }

    public String getFileChecksum(String pid)
            throws
            FedoraObjectNotFoundException,
            FedoraDatastreamNotFoundException,
            FedoraCommunicationException,
            FedoraAuthenticationException {
        rest.objectExists(pid);
        DatastreamProfile profile;
        try {
            profile = rest.getDatastreamProfile(pid, contentDatastreamName);
        } catch (ResourceNotFoundException e) {
            throw new FedoraDatastreamNotFoundException(
                    "The datastream does not exist",
                    e);
        }
        return profile.getDsChecksum();
    }

    public void setObjectLabel(String pid, String label) throws
                                                         FedoraAuthenticationException,
                                                         FedoraObjectNotFoundException,
                                                         FedoraCommunicationException {
        rest.setObjectLabel(pid, label);
    }

    public void setDatastreamFormatURI(String pid,
                                       String datastream,
                                       String formatURI) throws
                                                         FedoraObjectNotFoundException,
                                                         FedoraAuthenticationException,
                                                         FedoraCommunicationException,
                                                         FedoraDatastreamNotFoundException {
        rest.objectExists(pid);
        try {
            rest.setDatastreamFormatURI(pid, datastream, formatURI);
        } catch (ResourceNotFoundException e) {
            throw new FedoraDatastreamNotFoundException("Datastream not found",
                                                        e);
        }
    }

    public boolean isControlledByLowlevel(String pid) throws
                                                      ResourceNotFoundException,
                                                      FedoraAuthenticationException,
                                                      FedoraCommunicationException {
        rest.objectExists(pid);
        List<String> foundObjects = null;
        try {
            foundObjects = rest.query(URLEncoder.encode(
                    "select $cm from <#ri> "
                    + "where $object <mulgara:is> <info:fedora/" + pid + "> "
                    + "and $object <fedora-model:hasModel> $cm "
                    + "and $cm <http://doms.statsbiblioteket.dk/relations/"
                    + "default/0/1/#isControlledByLowLevelBitstorage> 'false'",
                    "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            throw new ResourceNotFoundException("The server lacks UTF-8 support");
        }
        if (foundObjects.isEmpty()) {
            return true;
        } else {
            return false;
        }
    }
}
